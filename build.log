   Compiling syn v2.0.106
   Compiling syn v1.0.109
   Compiling borsh-derive-internal v0.10.4
   Compiling borsh-schema-derive-internal v0.9.3
   Compiling borsh-derive-internal v0.9.3
   Compiling borsh-schema-derive-internal v0.10.4
   Compiling anchor-derive-space v0.30.1
   Compiling serde_derive v1.0.228
   Compiling thiserror-impl v1.0.69
   Compiling bytemuck_derive v1.10.2
   Compiling borsh-derive v1.5.7
   Compiling solana-frozen-abi-macro v1.18.26
   Compiling num-derive v0.4.2
   Compiling solana-sdk-macro v1.18.26
   Compiling spl-program-error-derive v0.4.1
   Compiling num_enum_derive v0.7.4
   Compiling thiserror v1.0.69
   Compiling spl-discriminator-syn v0.2.1
   Compiling bytemuck v1.24.0
   Compiling spl-discriminator-derive v0.2.0
   Compiling num_enum v0.7.4
   Compiling borsh v1.5.7
   Compiling serde v1.0.228
   Compiling bv v0.11.1
   Compiling bincode v1.3.3
   Compiling toml v0.5.11
   Compiling anchor-syn v0.30.1
   Compiling anchor-lang-idl-spec v0.1.0
   Compiling proc-macro-crate v0.1.5
   Compiling solana-frozen-abi v1.18.26
   Compiling anchor-lang-idl v0.1.2
   Compiling borsh-derive v0.10.4
   Compiling borsh-derive v0.9.3
   Compiling borsh v0.9.3
   Compiling borsh v0.10.4
   Compiling solana-program v1.18.26
   Compiling anchor-attribute-constant v0.30.1
   Compiling anchor-derive-serde v0.30.1
   Compiling anchor-attribute-error v0.30.1
   Compiling anchor-attribute-event v0.30.1
   Compiling anchor-derive-accounts v0.30.1
   Compiling anchor-attribute-access-control v0.30.1
   Compiling anchor-attribute-account v0.30.1
   Compiling anchor-attribute-program v0.30.1
   Compiling spl-program-error v0.4.4
   Compiling solana-zk-token-sdk v1.18.26
   Compiling spl-discriminator v0.2.5
   Compiling spl-memo v4.0.4
   Compiling spl-token v4.0.3
   Compiling spl-pod v0.2.5
   Compiling spl-type-length-value v0.4.6
   Compiling spl-token-group-interface v0.2.5
   Compiling spl-tlv-account-resolution v0.6.5
   Compiling spl-token-metadata-interface v0.3.5
   Compiling spl-transfer-hook-interface v0.6.5
   Compiling spl-token-2022 v3.0.5
   Compiling anchor-lang v0.30.1
   Compiling spl-associated-token-account v3.0.4
   Compiling anchor-spl v0.30.1
   Compiling investor-fee-distributor v0.1.0 (/home/bprime/Bounties/dammv2-quote-fee/investor-fee-distributor/programs/investor-fee-distributor)
warning: unexpected `cfg` condition value: `custom-heap`
  --> programs/investor-fee-distributor/src/lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = help: consider adding `custom-heap` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs/investor-fee-distributor/src/lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = help: consider adding `custom-panic` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs/investor-fee-distributor/src/instructions/crank_distribution.rs:13:10
   |
13 | #[derive(Accounts)]
   |          ^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = help: consider adding `anchor-debug` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs/investor-fee-distributor/src/instructions/crank_distribution_full.rs:13:10
   |
13 | #[derive(Accounts)]
   |          ^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = help: consider adding `anchor-debug` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `error::ErrorCode`
 --> programs/investor-fee-distributor/src/instructions/initialize_honorary_position.rs:3:27
  |
3 | use crate::{constants::*, error::ErrorCode, events::*, state::*, dynamic_amm};
  |                           ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs/investor-fee-distributor/src/instructions/initialize_honorary_position.rs:5:10
  |
5 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = help: consider adding `anchor-debug` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs/investor-fee-distributor/src/instructions/initialize_policy.rs:4:10
  |
4 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = help: consider adding `anchor-debug` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: ambiguous glob re-exports
 --> programs/investor-fee-distributor/src/instructions/mod.rs:6:9
  |
6 | pub use crank_distribution::*;
  |         ^^^^^^^^^^^^^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
...
9 | pub use initialize_policy::*;
  |         -------------------- but the name `handler` in the value namespace is also re-exported here
  |
  = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
 --> programs/investor-fee-distributor/src/instructions/mod.rs:6:9
  |
6 | pub use crank_distribution::*;
  |         ^^^^^^^^^^^^^^^^^^^^^ the name `InvestorData` in the type namespace is first re-exported here
7 | pub use crank_distribution_full::*;
  |         -------------------------- but the name `InvestorData` in the type namespace is also re-exported here

warning: `InvestorData` is ambiguous
  --> programs/investor-fee-distributor/src/lib.rs:61:28
   |
61 |         investor_data: Vec<InvestorData>,
   |                            ^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `InvestorData` could refer to the struct imported here
  --> programs/investor-fee-distributor/src/instructions/mod.rs:6:9
   |
6  | pub use crank_distribution::*;
   |         ^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `InvestorData` to disambiguate
note: `InvestorData` could also refer to the struct imported here
  --> programs/investor-fee-distributor/src/instructions/mod.rs:7:9
   |
7  | pub use crank_distribution_full::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `InvestorData` to disambiguate
   = note: `#[warn(ambiguous_glob_imports)]` on by default

warning: `InvestorData` is ambiguous
  --> programs/investor-fee-distributor/src/lib.rs:71:28
   |
71 |         investor_data: Vec<InvestorData>,
   |                            ^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `InvestorData` could refer to the struct imported here
  --> programs/investor-fee-distributor/src/instructions/mod.rs:6:9
   |
6  | pub use crank_distribution::*;
   |         ^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `InvestorData` to disambiguate
note: `InvestorData` could also refer to the struct imported here
  --> programs/investor-fee-distributor/src/instructions/mod.rs:7:9
   |
7  | pub use crank_distribution_full::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `InvestorData` to disambiguate

warning: `InvestorData` is ambiguous
  --> programs/investor-fee-distributor/src/lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `InvestorData` could refer to the struct imported here
  --> programs/investor-fee-distributor/src/instructions/mod.rs:6:9
   |
6  | pub use crank_distribution::*;
   |         ^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `InvestorData` to disambiguate
note: `InvestorData` could also refer to the struct imported here
  --> programs/investor-fee-distributor/src/instructions/mod.rs:7:9
   |
7  | pub use crank_distribution_full::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `InvestorData` to disambiguate

warning: unused import: `error::*`
  --> programs/investor-fee-distributor/src/lib.rs:11:9
   |
11 | pub use error::*;
   |         ^^^^^^^^

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs/investor-fee-distributor/src/lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = help: consider adding `anchor-debug` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs/investor-fee-distributor/src/lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = help: consider adding `anchor-debug` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `[u8; 64]: Default` is not satisfied
  --> programs/investor-fee-distributor/src/state/investor_fee_position_owner.rs:28:5
   |
5  | #[derive(Default)]
   |          ------- in this derive macro expansion
...
28 |     pub reserved: [u8; 64],
   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `[u8; 64]`
   |
   = help: the following other types implement trait `Default`:
             &[T]
             &mut [T]
             [T; 0]
             [T; 10]
             [T; 11]
             [T; 12]
             [T; 13]
             [T; 14]
           and 27 others
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `[u8; 64]: Default` is not satisfied
  --> programs/investor-fee-distributor/src/state/policy_config.rs:24:5
   |
5  | #[derive(Default)]
   |          ------- in this derive macro expansion
...
24 |     pub reserved: [u8; 64],
   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `[u8; 64]`
   |
   = help: the following other types implement trait `Default`:
             &[T]
             &mut [T]
             [T; 0]
             [T; 10]
             [T; 11]
             [T; 12]
             [T; 13]
             [T; 14]
           and 27 others
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> programs/investor-fee-distributor/src/lib.rs:73:79
    |
73  |         instructions::crank_distribution_full::handler_full(ctx, total_pages, investor_data)
    |         ---------------------------------------------------                   ^^^^^^^^^^^^^ expected `InvestorData`, found `crank_distribution::InvestorData`
    |         |
    |         arguments to this function are incorrect
    |
    = note: `crank_distribution::InvestorData` and `InvestorData` have similar names, but are actually distinct types
note: `crank_distribution::InvestorData` is defined in module `crate::instructions::crank_distribution` of the current crate
   --> programs/investor-fee-distributor/src/instructions/crank_distribution.rs:6:1
    |
6   | pub struct InvestorData {
    | ^^^^^^^^^^^^^^^^^^^^^^^
note: `InvestorData` is defined in module `crate::instructions::crank_distribution_full` of the current crate
   --> programs/investor-fee-distributor/src/instructions/crank_distribution_full.rs:6:1
    |
6   | pub struct InvestorData {
    | ^^^^^^^^^^^^^^^^^^^^^^^
note: function defined here
   --> programs/investor-fee-distributor/src/instructions/crank_distribution_full.rs:138:8
    |
138 | pub fn handler_full(
    |        ^^^^^^^^^^^^
...
141 |     investor_data: Vec<InvestorData>,
    |     --------------------------------

warning: unused variable: `investor`
   --> programs/investor-fee-distributor/src/instructions/crank_distribution.rs:211:17
    |
211 |         for (i, investor) in investor_data.iter().enumerate() {
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_investor`
    |
    = note: `#[warn(unused_variables)]` on by default

error: lifetime may not live long enough
   --> programs/investor-fee-distributor/src/instructions/crank_distribution.rs:233:27
    |
77  |     ctx: Context<CrankDistribution>,
    |     ---
    |     |
    |     has type `anchor_lang::context::Context<'_, '_, '_, '_, crank_distribution::CrankDistribution<'2>>`
    |     has type `anchor_lang::context::Context<'_, '_, '_, '1, crank_distribution::CrankDistribution<'_>>`
...
233 |                     from: ctx.accounts.treasury_quote_ata.to_account_info(),
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'2` must outlive `'1`
    |
    = note: requirement occurs because of the type `anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>`, which makes the generic argument `'_` invariant
    = note: the struct `anchor_lang::prelude::Account<'info, T>` is invariant over the parameter `'info`
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter
    |
76  ~ pub fn handler<'a>(
77  ~     ctx: Context<'a, CrankDistribution<'a>>,
    |

error: lifetime may not live long enough
   --> programs/investor-fee-distributor/src/instructions/crank_distribution.rs:234:25
    |
77  |     ctx: Context<CrankDistribution>,
    |     ---
    |     |
    |     has type `anchor_lang::context::Context<'_, '_, '_, '1, crank_distribution::CrankDistribution<'_>>`
    |     has type `anchor_lang::context::Context<'_, '_, '_, '_, crank_distribution::CrankDistribution<'2>>`
...
234 |                     to: investor_atas[i].to_account_info(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`
    |
    = note: requirement occurs because of the type `anchor_lang::prelude::AccountInfo<'_>`, which makes the generic argument `'_` invariant
    = note: the struct `anchor_lang::prelude::AccountInfo<'a>` is invariant over the parameter `'a`
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter
    |
76  ~ pub fn handler<'a>(
77  ~     ctx: Context<'a, CrankDistribution<'a>>,
    |

warning: unused variable: `investor`
   --> programs/investor-fee-distributor/src/instructions/crank_distribution_full.rs:296:17
    |
296 |         for (i, investor) in investor_data.iter().enumerate() {
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_investor`

error: lifetime may not live long enough
   --> programs/investor-fee-distributor/src/instructions/crank_distribution_full.rs:315:27
    |
139 |     ctx: Context<CrankDistributionFull>,
    |     ---
    |     |
    |     has type `anchor_lang::context::Context<'_, '_, '_, '_, crank_distribution_full::CrankDistributionFull<'2>>`
    |     has type `anchor_lang::context::Context<'_, '_, '_, '1, crank_distribution_full::CrankDistributionFull<'_>>`
...
315 |                     from: ctx.accounts.treasury_quote_ata.to_account_info(),
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'2` must outlive `'1`
    |
    = note: requirement occurs because of the type `anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>`, which makes the generic argument `'_` invariant
    = note: the struct `anchor_lang::prelude::Account<'info, T>` is invariant over the parameter `'info`
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter
    |
138 ~ pub fn handler_full<'a>(
139 ~     ctx: Context<'a, CrankDistributionFull<'a>>,
    |

error: lifetime may not live long enough
   --> programs/investor-fee-distributor/src/instructions/crank_distribution_full.rs:316:25
    |
139 |     ctx: Context<CrankDistributionFull>,
    |     ---
    |     |
    |     has type `anchor_lang::context::Context<'_, '_, '_, '1, crank_distribution_full::CrankDistributionFull<'_>>`
    |     has type `anchor_lang::context::Context<'_, '_, '_, '_, crank_distribution_full::CrankDistributionFull<'2>>`
...
316 |                     to: investor_atas[i].to_account_info(),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`
    |
    = note: requirement occurs because of the type `anchor_lang::prelude::AccountInfo<'_>`, which makes the generic argument `'_` invariant
    = note: the struct `anchor_lang::prelude::AccountInfo<'a>` is invariant over the parameter `'a`
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter
    |
138 ~ pub fn handler_full<'a>(
139 ~     ctx: Context<'a, CrankDistributionFull<'a>>,
    |

Some errors have detailed explanations: E0277, E0308.
For more information about an error, try `rustc --explain E0277`.
warning: `investor-fee-distributor` (lib) generated 22 warnings (5 duplicates)
error: could not compile `investor-fee-distributor` (lib) due to 7 previous errors; 22 warnings emitted
